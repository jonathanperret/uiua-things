TestCases ← {
  # literals
  $ 123
  $ "hello"
  $ @x
  $ @😇
  $ []
  $ [i 0 1 2]
  $ {}
  $ [[4 5 6][7 8 9]]
  $ ["x" "y"]
  $ {"x" "yz"}
  $ i
  $ NaN
  $ [NaN]
  $ {NaN}
  $ comptime(ℂ NaN NaN)
  $ comptime(map [1] [2])
  $ [{}]
  $ {[]}
  $ @\\t
  $ -@\\x00 @Z

  # stack operations
  $ .2
  $ ,1 2
  $ :1 2
  $ ;1 2 3

  # monadic pervasive
  $ ∘ 3
  $ ¬ 3
  $ ± 3
  $ ¯ 1
  $ ⌵ `1
  $ √ 4
  $ ○ 0
  $ ⌊ 1234.56
  $ ⌈ 1.234
  $ ⁅ 5.678

  # dyadic pervasive
  $ =1 2
  $ ≠1 2
  $ <1 2
  $ ≤1 2
  $ >1 2
  $ ≥1 2
  $ +2 4
  $ -2 5
  $ *2 4
  $ ÷2 6
  $ ◿2 7
  $ ⁿ2 3
  $ ₙ2 8
  $ ↧3 8
  $ ↥3 8
  $ ∠1 0
  $ ℂ1 2

  # monadic array
  $ ⧻5
  $ △5
  $ ⇡5
  $ ⊢[1 2 3]
  $ ⇌[1 2 3]
  $ ♭5
  $ ¤5
  $ ⋯27
  $ ⍉.[[1 2] [3 4] [5 6]]
  $ ⍏[6 2 7 0 ¯1 5]
  $ ⍖[6 2 7 0 ¯1 5]
  $ ⊚ [1 0 0 1 0 1 1 0]
  $ ⊛[7 7 8 0 1 2 0]
  $ ⊝[7 7 8 0 1 2 0]
  $ ⊔□5
  $ ⋕ "17"

  # dyadic array
  $ ≍ [0 1 2] [0 1 2]
  $ ⊟ 1 2
  $ ⊂ 1 2
  $ ⊏ 2 [8 3 9 2 0]
  $ ⊡ 2 [8 3 9 2 0]
  $ ↯ [2 3] [1 2 3 4 5 6]
  $ ☇ 0 ↯[2 3 3]⇡18
  $ ↙ 3 [8 3 9 2 0]
  $ ↘ 3 [8 3 9 2 0]
  $ ↻1 ⇡5
  $ ◫2 .⇡4
  $ ▽ [1 0 2 3 1] [8 3 9 2 0]
  $ ⌕ 5 [1 8 5 2 3 5 4 5 6 7]
  $ ∊ 2 [1 2 3]
  $ ⊗ 2 [1 2 3]

  # misc
  $ ⍤"ok" 1
  $ gen0
  $ deal0 [1 2 3 4 5]
  $ regex "h([io])" "hihaho"
  $ utf "hello!"
  $ ≥0 tag
  $ type 5
  $ ±now
  $ - . ⚂

  # constants
  $ η
  $ π
  $ τ
  $ ∞

  # maps
  $ map 1\_2 3\_4
  $ insert 1 2 {}
  $ has 1 map 1\_2 3\_4
  $ get 1 1\_2 3\_4
  $ remove 3 map 1\_2 3\_4

  # System
  $ &sc
  $ &cd "/tmp"
  $ &fras "/tmp/data1.tmp" &fwa "/tmp/data1.tmp" "data"
  $ &frab "/tmp/data2.tmp" &fwa "/tmp/data2.tmp" "data"
  $ &ims [[1 0][0 1]]
  $ type &args

  # Switch
  $ (10|20)0
  $ (10 20|20 30)1
  $ (*2|*4+)1 10 90
  $ (*2|*4+)0 10 90
  $ (*2|*4+)0 10 90 99
  $ (|4.3 1 2 3 ⋅⋅⋅;||3.2 5 6 ⋅⋅;)0 10 20 30 40
  $ (|4.3 1 2 3 ⋅⋅⋅;||3.2 5 6 ⋅⋅;)1 10 20 30 40

  # Format
  $ $"\_" 100
  $ $"[x=\_ y=\_]" 100 200

  # PushTemp, PopTemp
  $ ⊙100 200
  $ ⊙⊙∘ 100 200 300
  $ ⊙⋅⋅⊙100 200 300 400 500
  $ ⊙⋅⋅⊙∘ 100 200 300 400 500
  $ ⊃(×2|+1) 100
  $ ⊃(×2+|+1) 100 200 300
  $ ⊃(×2|⊙∘) 10 100 1000

  # CopyToTemp, CopyFromTemp, DropTemp
  $ ⍜(×10) ⁅ 1.234
  $ ⍜⊢(×2) [1 2 3]
  $ ⊢⇌[1 2 3]

  # Call
  $ F ← ⍤.1 § F

  # BeginArray, EndArray, TouchStack
  $ {. "hello"}
  $ [. 123]
  $ [. {. 123}]
  $ [. 123 456] 789
  $ {;1} 789
  $ [;1] 789
  $ {⊙∘} 1 2 3
  $ [∘] 1
  $ [=] 1 2
  $ [:] 1 2
  $ [,] 1 2
  $ [insert 5 6] map [1 2] [3 4]
  $ [.] 1
  $ [$"hello \_"] 123

  # inv_where
  $ °⊚[0 3 5 6]

  # inverse_bits
  $ °⋯ [1 0 1]

  # under now
  $ >0 ⍜now (+1 2)

  # unrerank
  # $ ⍜(☇0)∘ [[2 3][4 5]]

  # reduce
  $ /+ [1 2 3 4 5]
  $ /- [1 2 3 4 5]
  $ /- [1 2 3 4 5]
  $ /(×+1) [1 2 3 4 5]
  $ /⊂ [[0 1][2 3]]
  $ /⊂ ↯[2 2 4]⇡16
  $ /+ [123]
  $ /+ 123
  $ /× ↯3_0 0
  # $ /+ []
  # $ /× []
  # $ /↥ []
  # $ /↧ []
  # $ /∠ []

  # fold
  # $ ∧+ [1 2 3] 10
  # $ ∧+ [] 10
  # $ ∧(⊃+(×⊙⋅∘)) +1⇡5 0 1
  # $ ∧(⊃+(×⊙⋅∘))⊙(0 1) +1⇡5
  # $ ∧⊃(+⊙⋅∘)(×⋅⊙⋅∘) [1 2 3] [4 5 6] 0 1
  # $ ∧(⊂⊂) [1 2 3] 4 []
  # $ ⇌∧(⊂+⊙(⊢.)) ⊃↘↙1 [1 2 3 4]

  # scan
  # $ \+   [1 2 3 4]
  # $ \-   [1 2 3 4]
  # $ \(-:) [1 2 3 4]
  # $ ▽\↧≠@ . "Hello World!"
  # $ ⊕□\+=@    . "Everyday man's on the block"
  # $ ⊕□\+↻¯1=@ . "Everyday man's on the block"

  # each
  # $ ∵(⊟.) [1 2 3 4]
  # $ ∵⊂ [1 2 3] [4 5 6]
  # $ ∵⊂ [1 2] [[4 5] [6 7]]
  $  + [1 2 3] [4 5 6]

  # rows
  $  /+ [[1 2 3] [4 5 6] [7 8 9]]
  # $ ≡/+ [[1 2 3] [4 5 6] [7 8 9]]
  # $ ≡/+ [[1 2] [3 4]] [5 6]
  # $ ≡⊂  [[1 2] [3 4]] [5 6]
  # $ ≡⊂ [1 2 3] 4
  # $ ≡⊂ 1 [2 3 4]
  # $ ≡(⊂⊂) 1 [2 3 4] 5
  # $ ≡⊂ ¤  [1 2 3] [4 5 6]
  # $ ≡⊂ ⊙¤ [1 2 3] [4 5 6]

  # table
  # $ ⊞+ [1 2 3] [4 5 6 7]
  # $ ⊞⊂ [1 2] [3 4]
  # $ △⊞+ [1 2] [3 4 5]
  # $ △⊞⊂ [1 2] [3 4 5]
  # $ △⊞+ [[1 2 3] [4 5 6]] [7 8 9 10]
  # $ △⊞⊂ [[1 2 3] [4 5 6]] [7 8 9 10]

  # cross
  # $ ⊠⊂ ,,[[7 8] [9 10]][[1 2] [3 4] [5 6]]
  # $ ⊠(⊂⊂) [1 2] [3 4] [5 6]
  # $ /⊂ ⊠(⊂⊂) ⊙¤ [1 2] [3 4] [5 6]

  # repeat
  $ ⍥(+2)5 99 200
  $ ⍥(+2)0 99 200
  $ ⍥(⊂2)5 []
  $ ⍥⊂3 [] 1 2 3

  # transpose_n
  $ ⍉⍉[1 2]
  $ °(⍉⍉)[1 2]

  # group
  # $ ⊕∘ [0 2 2 1 0 1] [1 2 3 4 5 6]
  # $ ⊕⊂ [] [0 2 2 1 0 1] [1 2 3 4 5 6]
  # $ ⊕□ [0 1 0 2 1 1] [1 2 3 4 5 6]
  # $ ⊕{⊢:⧻.} ⊛.⊏⍏. $ Count the characters is this string
  # $ ⍜⊕□≡⇌ ≠@ . $ These are some words

  # partition
  # $ ⊜∘ [0 0 2 2 1 1 3 3] [1 2 3 4 5 6 7 8]
  # $ ⊜⊂ [] [0 0 2 2 1 1 3 3] [1 2 3 4 5 6 7 8]
  # $ ⊜□ [0 2 3 3 3 0 1 1] [1 2 3 4 5 6 7 8]
  # $ ⊜□ ≠@ . $ Hey there friendo
  # $ ⍜⊜□⇌ ≠@ . $ These are some words

  # unpack
  # $ ⊐/⊂ {"a" "bc" "def"}
  # $ ⊐(¯□3)
  # $ ⊐( □3)

  # do
  # $ ⍢(×2)(<1000) 1
  # $ ⍢⊂(¬∊,,(+1×3|÷2)=0◿2.⊢.) [7]
  # $ ⍢(×3)(<100)  1
  # $ ⍢(×3)(<100.) 1
  # $ ⍢(⊃(×2)⊂)(<100) 1 []

  # fill
  # $ ⬚0↙ 7 [8 3 9 2 1]
  # $ ⬚π↙ ¯6 [1 2 3]
  # $ ⬚42↙ 4 [[1 2 3] [4 5 6]]
  # $ ⬚0⊟ 1 [2 3]
  # $ ⬚0⊟ [1 2] [3 4 5 6]
  # $ ⬚0⊟ [1 2 3] [[4 5] [6 7]]
  # $ ⬚0⊂ 1 [[2 3 4] [5 6 7]]
  # $ ⬚0⊂ [[1 2] [3 4]] [5 6 7]
  # $ ⬚0[1 [2 3] [4 5 6]]
  # $ ⬚0+ [1 2 3] [10 9 8 7 6 5]
  # $ ⬚0\⊂ [1 2 3 4 5]
  # $ ⬚@ ⊜∘≠@ . "No □ needed!"
  # $ ⬚∞⊏ [3 7 0] [8 3 9 2 0]
  # $ ⬚0▽ ≡/>◫2. [1 8 0 2 7 2 3]
  # $ ⬚0↯ [3 5] ⇡9
  # $ ⬚0↻ 2 [1 2 3 4 5]
  # $ ⬚∘+ 100 [1 2 3 4] [5 6]
  # $ ⬚0(↻1 ⇡5 ⬚[]↻3 ⇡5 ↻2 ⇡5)

  # try
  # $ ⍣(+1 2)$"Error:  "
  # $ ⍣(+@a @b)$"Error:  "

  # this
  # recur
  # $ ↬((|1 ×↫-1.|1)<2.) 5

  # bind
  # $ bind(⊂ b + a c) 1 2 3

  # memo
  # $ ∵memo(+⌊×10⚂)[1 1 2 2 3 3]

  # spawn
  # wait
  # $ wait spawn⇡ 10

  # send
  # recv
  # tryrecv

  # dump
  # $ dump⊢ [1 2 3] 4 [5 6 7]
}

WithTempFile ← &i "tempfile.ua" "WithTempFile"

Replace ← ⊐/⊂ ↘1 ♭≡⊂ {∘}: ⊢⇌⍉ regex ⊃(⊂"(.*?)"|⊂: ⊙⋅∘|⋅∘)
---
⍤⊃⋅∘≍ "azzbzz" Replace "cc" "zz" "accbcc"
---

Escape ← ↘¯1 ⊐/⊂ ↘1♭≡⊂ ⊃(□⊂@\\|⊕□⍜▽¯:\+.=, ⊙(⊂:@.))
---
⍤⊃⋅∘≍ "a\\b\\\"c" Escape @" "a\\b\"c"
⍤⊃⋅∘≍ "a\\\\b\"c" Escape @\\ "a\\b\"c"
---

GetProgramPath ← ⍣(°□⊢&args|⋅"")
DirName ← ↘ ¯+1⊗@/ ⇌.

MakeCheckProgram ← (
  ⊃(
    ⍤"must run with absolute path for tests"=@/⊢. GetProgramPath
    $"_/vm-test-helper.ua" DirName
  | ⊜□≠@§.
    ⊃(
      (""|⊐/$"_\n_") ±⧻. ↘¯1
    | °□⊢⇌
    )
  | $"\"_\"" Replace @§ "\\n" Escape @" Escape @\\
  )
  $ # Experimental!
  $ Check ← &i "_" "Check"
  $ _
  $ {
  $ _
  $ }
  $ Check: _

)

# expr -- success
AutoCheck ← (|1
  MakeCheckProgram.
  # programtext expr
  ⍜WithTempFile (&runc {"uiua" "run" "--no-format" ∘})
  # -- exitcode stdout stderr
  ⊃(
    ↧ ∩(=0) ⊙⋅⧻ # success is exitcode=0 && empty stderr

  | ⋅⊂ # join stderr to stdout

  )
  # -- success output expr
  (
    &p$"❌ _\n_":
    0
  | # &p⋅$"✅ _"
    1
  )
)

ThreadCount ← NumProcs

Parallel! ← (
  ⊐/⊂ ▽≡⧻. ≡(□≡wait ≡spawn^1 ▽≡(¬≍□0).) ⬚(□0)↯ ⊟ :ThreadCount ¯1
)

RunTests ← &p⍜now(
  ⊐/⊂ ≡(⍜°□(⊜□ ≠@\n.)) TestCases
  Parallel!(AutoCheck °□)
  &p⊡:"😭🎉" /↧
)

RunTests
